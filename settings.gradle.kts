@file:Suppress("UnstableApiUsage")

rootProject.name = "swissknife"

fun module(vararg pathSegments: String) = subProject(rootFolder = "modules", pathSegments = pathSegments)

fun subProject(rootFolder: String, vararg pathSegments: String, excludeRootFolderFromGroupName: Boolean = true) {

    val projectName = pathSegments.last()
    val path = listOf(rootFolder) + pathSegments.dropLast(1)
    val group = if (excludeRootFolderFromGroupName) path.minus(rootFolder).joinToString(separator = "-") else path.joinToString(separator = "-", prefix = "${rootProject.name}-")
    val directory = path.joinToString(separator = "/", prefix = "./")
    val fullProjectName = "${if (group.isEmpty()) "" else "$group-"}$projectName"

    include(fullProjectName)
    project(":$fullProjectName").projectDir = mkdir("$directory/$projectName")
}

fun includeProject(name: String) {

    apply("$name/settings.gradle.kts")
}

enableFeaturePreview("TYPESAFE_PROJECT_ACCESSORS")

module("test", "utils")
module("test", "containers", "utils")
module("kotlin", "extensions")
module("configuration", "utils")
module("lens", "core", "extensions")
module("lens", "correlation", "extensions")
module("core", "domain")
module("core", "utils")
module("core", "test", "utils")
module("correlation", "core", "test", "utils")
module("correlation", "logging", "test", "utils")
module("correlation", "logging", "utils")
module("correlation", "core", "domain")
module("avro", "serialization", "utils")
module("avro", "serialization", "test", "utils")
module("avro", "schema", "repository", "domain")
module("avro", "schema", "catalogue", "domain")
module("avro", "schema", "catalogue", "test", "utils")
module("avro", "schema", "checker")
module("ddd", "domain")
module("ddd", "logging", "utils")
module("ddd", "test", "utils")
module("pagination", "domain")
module("pagination", "test", "utils")
module("resource", "utils")
module("messaging", "domain")
module("messaging", "configuration", "utils")
module("messaging", "test", "utils")
module("json", "utils")
module("json", "test", "utils")
module("hashing", "utils")
module("cryptography", "domain")
module("cryptography", "test", "specification")
module("cryptography", "implementation", "bouncy-castle")
module("logger", "core")
module("logger", "slf4j", "adapter")
module("logger", "slf4j", "example")
module("logger", "json", "formatter")
module("logging", "standard", "configuration")
module("logging", "standard", "slf4j", "configuration")
module("http4k", "utils")
module("http4k", "server", "utils")
module("openapi", "parser")
module("openapi", "checking", "checker")
module("openapi", "checking", "tests")
module("openapi", "checking", "test", "utils")
module("openapi", "builder")
module("openapi", "provider")
module("openapi", "validation", "request", "validator")
module("openapi", "validation", "request", "validator", "tests")
module("openapi", "validation", "request", "validator", "test", "utils")
module("openapi", "validation", "http4k", "validator")
module("openapi", "validation", "http4k", "test", "utils")
module("web", "service", "domain")
module("web", "service", "utils")
module("web", "api", "test", "utils")
module("web", "api", "json", "serialization")
module("web", "api", "utils")
module("web", "openapi", "utils")
module("web", "openapi", "test", "utils")
module("web", "api", "domain")
module("web", "client-info", "domain")
module("web", "client-info", "analyzer")
module("pulsar", "utils")
module("pulsar", "test", "utils")
module("pulsar", "json", "utils")
module("pulsar", "json", "serialization")
module("pulsar", "avro", "utils")
module("pulsar", "avro", "serialization")
module("pulsar", "messaging", "adapter")
module("pulsar", "messaging", "test", "utils")
module("nats", "client")
module("nats", "test", "utils")
module("jwt", "domain")
module("jwt", "jose4j", "processor")
module("jwt", "jose4j", "issuer")
module("jwt", "jose4j", "utils")
module("jwt", "jose4j", "examples")
module("jwt", "test", "utils")
module("sql", "domain")
module("sql", "reactive", "utils")
module("sql", "postgres", "utils")
module("sql", "postgres", "pagination", "utils")
module("sql", "postgres", "migrator", "liquibase")
module("sql", "postgres", "container")
module("sql", "migrator", "domain")
module("sql", "migrator", "liquibase")
module("sql", "postgres", "test", "utils")
module("service", "domain")
module("readiness", "domain")
module("service", "readiness", "http4k")
module("serialization", "domain")
module("protected-value", "domain")
module("protected-value", "factory", "aes")
module("compliance-checker", "domain")
module("compliance-checker", "test", "utils")
module("keycloak", "container")
module("opentelemetry", "core")
module("opentelemetry", "exporter", "oltp")
module("opentelemetry", "test", "container", "utils")